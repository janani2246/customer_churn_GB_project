# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19mddwegh-XQc5fTkJ5vZKEnF-7iOdK7L
"""

# app.py - Streamlit Churn Prediction Dashboard (compatible with churn_model.pkl)

import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

# Load model
model = joblib.load('streamlit_app/churn_model.pkl')

# Title
st.title("📉 Customer Churn Prediction Dashboard")

# File uploader
uploaded_file = st.file_uploader("📂 Upload your customer CSV file", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.success("✅ File uploaded successfully!")

    st.subheader("📊 Raw Data Preview")
    st.write(df.head())

    # Show churn analytics if 'enrolled' column is present
    st.subheader("📈 Churn Analytics")
    if 'enrolled' in df.columns:
        churn_counts = df['enrolled'].value_counts()
        fig, ax = plt.subplots()
        sns.barplot(x=churn_counts.index, y=churn_counts.values, palette="Set2", ax=ax)
        ax.set_title("Enrolled (Churn Proxy) Distribution")
        ax.set_xlabel("Enrolled")
        ax.set_ylabel("Count")
        st.pyplot(fig)

    # Predict churn
    st.subheader("🔮 Churn Predictions")

    try:
        # Drop columns not used in model training
        input_df = df.drop(columns=['user', 'first_open', 'screen_list', 'enrolled_date', 'enrolled'], errors='ignore')

        # Convert time string to hour
        if 'hour' in input_df.columns:
            input_df['hour'] = input_df['hour'].astype(str).str.strip()
            input_df['hour'] = pd.to_datetime(input_df['hour'], format='%H:%M:%S', errors='coerce').dt.hour.fillna(0)

        # Convert boolean-like columns
        for col in ['minigame', 'used_premium_feature', 'liked']:
            if col in input_df.columns:
                input_df[col] = input_df[col].astype(int)

        # Predict
        predictions = model.predict(input_df)
        df['Predicted_Churn'] = predictions

        st.write("📋 Prediction Summary")
        st.write(df['Predicted_Churn'].value_counts().rename_axis('Churn').reset_index(name='Count'))

        st.subheader("📥 Download Results")
        st.download_button("Download CSV with Predictions", df.to_csv(index=False), file_name="churn_predictions.csv")

    except Exception as e:
        st.error(f"❌ Prediction failed: {e}")
